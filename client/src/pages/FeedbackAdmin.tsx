import { useState } from "react";
import { useAuth } from "@/_core/hooks/useAuth";
import DashboardLayout from "@/components/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Star, MessageSquare, AlertCircle } from "lucide-react";
import { trpc } from "@/lib/trpc";

interface Feedback {
  id: number;
  feedbackType: string;
  title: string;
  description: string;
  rating?: number;
  status: string;
  adminResponse?: string;
  createdAt: Date;
}

export default function FeedbackAdmin() {
  const { user } = useAuth();
  const [selectedFeedback, setSelectedFeedback] = useState<Feedback | null>(null);
  const [adminResponse, setAdminResponse] = useState("");
  const [newStatus, setNewStatus] = useState("");
  const [isUpdating, setIsUpdating] = useState(false);

  // Check if user is admin
  if (!user || user.role !== "admin") {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center min-h-screen">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertCircle className="text-red-500" />
                Truy C·∫≠p B·ªã T·ª´ Ch·ªëi
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y. Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ xem.</p>
            </CardContent>
          </Card>
        </div>
      </DashboardLayout>
    );
  }

  const { data: feedbackData, isLoading } = trpc.feedback.list.useQuery({
    limit: 50,
    offset: 0,
  });

  const updateStatusMutation = trpc.feedback.updateStatus.useMutation({
    onSuccess: () => {
      setSelectedFeedback(null);
      setAdminResponse("");
      setNewStatus("");
      setIsUpdating(false);
      alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    },
    onError: (error) => {
      setIsUpdating(false);
      alert("L·ªói: " + error.message);
    },
  });

  const handleUpdateStatus = async () => {
    if (!selectedFeedback || !newStatus) {
      alert("Vui l√≤ng ch·ªçn tr·∫°ng th√°i");
      return;
    }

    setIsUpdating(true);
    updateStatusMutation.mutate({
      feedbackId: selectedFeedback.id,
      status: newStatus as any,
      adminResponse: adminResponse || undefined,
    });
  };

  const getFeedbackTypeIcon = (type: string) => {
    switch (type) {
      case "bug_report":
        return "üêõ";
      case "improvement_suggestion":
        return "üí°";
      case "data_correction":
        return "‚úèÔ∏è";
      default:
        return "üìù";
    }
  };

  const getFeedbackTypeLabel = (type: string) => {
    const labels: Record<string, string> = {
      bug_report: "B√°o c√°o l·ªói",
      improvement_suggestion: "ƒê·ªÅ xu·∫•t c·∫£i ti·∫øn",
      data_correction: "Ch·ªânh s·ª≠a d·ªØ li·ªáu",
    };
    return labels[type] || type;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open":
        return "bg-blue-100 text-blue-800";
      case "in_progress":
        return "bg-yellow-100 text-yellow-800";
      case "resolved":
        return "bg-green-100 text-green-800";
      case "closed":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusLabel = (status: string) => {
    const labels: Record<string, string> = {
      open: "M·ªü",
      in_progress: "ƒêang x·ª≠ l√Ω",
      resolved: "ƒê√£ gi·∫£i quy·∫øt",
      closed: "ƒê√£ ƒë√≥ng",
    };
    return labels[status] || status;
  };

  return (
    <DashboardLayout>
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold">Qu·∫£n L√Ω Ph·∫£n H·ªìi</h1>
          <p className="text-gray-600 mt-2">
            Xem v√† qu·∫£n l√Ω t·∫•t c·∫£ c√°c ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng
          </p>
        </div>

        {isLoading ? (
          <Card>
            <CardContent className="pt-6">
              <p>ƒêang t·∫£i...</p>
            </CardContent>
          </Card>
        ) : feedbackData?.feedbacks && feedbackData.feedbacks.length > 0 ? (
          <div className="space-y-4">
            {feedbackData.feedbacks.map((feedback: any) => (
              <Card key={feedback.id} className="cursor-pointer hover:shadow-lg transition-shadow">
                <CardContent className="pt-6">
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-2xl">
                          {getFeedbackTypeIcon(feedback.feedbackType)}
                        </span>
                        <h3 className="text-lg font-semibold">{feedback.title}</h3>
                      </div>
                      <p className="text-gray-600 mb-3">{feedback.description}</p>
                      <div className="flex items-center gap-4 text-sm text-gray-500 mb-3">
                        <span>{getFeedbackTypeLabel(feedback.feedbackType)}</span>
                        {feedback.rating && (
                          <div className="flex items-center gap-1">
                            {[...Array(5)].map((_, i) => (
                              <Star
                                key={i}
                                size={14}
                                className={
                                  i < feedback.rating
                                    ? "fill-yellow-400 text-yellow-400"
                                    : "text-gray-300"
                                }
                              />
                            ))}
                          </div>
                        )}
                        <span>
                          {new Date(feedback.createdAt).toLocaleDateString("vi-VN")}
                        </span>
                      </div>
                      {feedback.adminResponse && (
                        <div className="bg-blue-50 border-l-4 border-blue-400 p-3 rounded mt-3">
                          <p className="text-sm font-semibold text-blue-900">Phan Hoi Tu Admin:</p>
                          <p className="text-sm text-blue-800 mt-1">{feedback.adminResponse}</p>
                        </div>
                      )}
                    </div>
                    <div className="flex flex-col items-end gap-2">
                      <Badge className={getStatusColor(feedback.status)}>
                        {getStatusLabel(feedback.status)}
                      </Badge>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setSelectedFeedback(feedback);
                          setNewStatus(feedback.status);
                          setAdminResponse(feedback.adminResponse || "");
                        }}
                      >
                        <MessageSquare size={16} className="mr-2" />
                        Ph·∫£n H·ªìi
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <Card>
            <CardContent className="pt-6">
              <p className="text-gray-600">Kh√¥ng c√≥ ph·∫£n h·ªìi n√†o</p>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Modal c·∫≠p nh·∫≠t ph·∫£n h·ªìi */}
      <Dialog open={!!selectedFeedback} onOpenChange={(open) => !open && setSelectedFeedback(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>C·∫≠p Nh·∫≠t Ph·∫£n H·ªìi</DialogTitle>
            <DialogDescription>
              {selectedFeedback?.title}
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {/* Tr·∫°ng th√°i */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Tr·∫°ng Th√°i</label>
              <Select value={newStatus} onValueChange={setNewStatus}>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="open">M·ªü</SelectItem>
                  <SelectItem value="in_progress">ƒêang x·ª≠ l√Ω</SelectItem>
                  <SelectItem value="resolved">ƒê√£ gi·∫£i quy·∫øt</SelectItem>
                  <SelectItem value="closed">ƒê√£ ƒë√≥ng</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Ph·∫£n h·ªìi t·ª´ admin */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Ph·∫£n H·ªìi T·ª´ Admin</label>
              <Textarea
                placeholder="Nh·∫≠p ph·∫£n h·ªìi c·ªßa b·∫°n cho ng∆∞·ªùi d√πng"
                value={adminResponse}
                onChange={(e) => setAdminResponse(e.target.value)}
                rows={5}
                disabled={isUpdating}
                className="resize-none"
              />
              <p className="text-xs text-gray-500">Ph·∫£n h·ªìi n√†y s·∫Ω ƒë∆∞·ª£c g·ª≠i cho ng∆∞·ªùi d√πng</p>
            </div>

            {/* N√∫t c·∫≠p nh·∫≠t */}
            <div className="flex gap-2 justify-end">
              <Button
                variant="outline"
                onClick={() => setSelectedFeedback(null)}
                disabled={isUpdating}
              >
                H·ªßy
              </Button>
              <Button
                onClick={handleUpdateStatus}
                disabled={isUpdating}
              >
                {isUpdating ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p Nh·∫≠t"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}
